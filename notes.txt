Python Introduction
===================

Toby Dussek

9:30  start
11:00 coffee until 11:15
12:30 lunch until 1:30
3:00  tea for 15 minutes
4:30  end

All my code will be here: https://github.com/onionmccabbage/pythonIntroDec2024

Monday
> Welcome and intros
> where to write code: module (just a file) or immediate python
- architecture, structure, and professional code best practice
> print() and input()
> maths operators and data types
> indentation
> immutable strings
> print formatting
> function returns None by default
> lists and tuples
- memory efficiency
> identifiers
> boolean True and False
> type and type conversion
> the if statement for conditional logic
> for, while, break and pass
> validate input
- string manipulation
> after lunch review exercise
> dictionaries (non-numeric indexed iterable collections)
> import, pip, libraries and modules
> functions

Tuesday
> how to access course recordings...
  https://neueda.conygre.com/Sites/Programming_in_Python/site/index.html
  scroll down to course recordings
  authenticate with: username student password Belfast2024
> quick review of where we got to
> passing command-line arguments (which are ALWAYS strings)
  using sys.argv to inject arguments
  handy for automation - inject config values at run time(avoids using 'input')
> Python 2 awareness...
  see https://python.land/migrating-from-python-2-to-3/how-to-migrate-to-python-3

> if __name__ == '__main__'
> range, generators
> comprehensions
> to add libraries to python:
  - python -m ensurepip
  - python â€“m pip install requests (or any other library you need)
> using requests (to access web API via HTTP)
  (NB be careful - may not work within WSL)
> strings with triple quotes
> exception handling (try-except etc.)
- debug tools   
> review exercise
q - pro/cons of using functional code or class-based code
    know when to use either
> File input and output
> we can retrieve text into a dict structure....

Wednesday
> brief review so far
> in Python EVERTHING is an Object - every function, every class every module....
> any input or output is necessarily slow: I/O bound
> anything with __nnn__ is part of python (built in features) called 'dunder'
> functions, *args, **kwargs  
> functions live in classes, which live in modules which live in packages
> PEP8 style guide https://pep8.org/
- custom generator and yield
> global and local scope 
- data modelling structures: 
    use built in structures until they do not suit the purpose (then use classes)
> Objects and Classes (OOP)
  classes have properties (something belonging to the class) and methods (something the class can do)
q - fix self.t in class_a
> __slots__
> get/set as property decorators @property
> name mangling (__) and slots
> properties, methods, __str__
> intrinsic attributes: __doc__ etc.
- special operators and overriding
> inheritance
- review exercise
- venv
- end of course feedback:
  https://easyretro.io/publicboard/NTDqkkm6utgJFD9cdBrdb4sI6n72/085eeffb-67cd-4230-b4a7-a6072dd984f0
  also
  https://apps.powerapps.com/play/17579985-153c-4727-b1f4-8b53e48b5e72?tenantId=92e84ceb-fbfd-47ab-be52-080c6b87953f&Type=ILT&ID=LZU1500463&OID=516707&Title=Programming%20in%20Python&Owner=Bhanu%20Pratap%20Singh%20C



- where to go from here:
  https://learnpython.org/
  https://pynative.com/python-exercises-with-solutions/
  the next courses: advanced python then further advanced python

Links
- Python official site https://python.org
- PEP8 style guide https://www.python.org/dev/peps/pep-0008/


End of course feedback (Wednesday)